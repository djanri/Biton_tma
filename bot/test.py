import asyncio
import base64
from ApiClient import ApiClient
from reaktion import reaction
from aiogram.dispatcher.filters.state import State, StatesGroup
import keyboard as krb
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import config as cf
# import database as db  # –£–±—Ä–∞–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
# from database import DataBase  # –£–±—Ä–∞–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
import os
from datetime import datetime, timedelta
from collections import defaultdict
# import sqlite3  # –£–±—Ä–∞–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
import requests
import time


BOT_TOKEN = '7061940889:AAEpuijapxSrjwJDSP8ngABd6tq1kLs9yiE'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤
def load_bad_words(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.text.splitlines()
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
        return []


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
POINTS_PER_COMMENT = 1
MAX_COMMENTS_PER_DAY = 3

user_data = defaultdict(lambda: {'points': 0, 'comments': 0, 'last_comment_time': datetime.now()})
logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

user_scores = {}

bad_words_url = "https://www.cs.cmu.edu/~biglou/resources/bad-words.txt"
bad_words = load_bad_words(bad_words_url)

Chanel_id = "-1002208916163"
Chanel2_id = "-1002154835852"
Not_Sub_Message = "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!"
storage = MemoryStorage()

# –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
# db_path = os.path.join('database', 'users.db')
# db1 = DataBase(db_path)
apiClient = ApiClient()

async def check_subscriptions(user_id, channel_ids):
    subscriptions = []
    for channel_id in channel_ids:
        member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        subscriptions.append(chek_chanel(member))
    return all(subscriptions)

async def on_startup(_):
    # await db.db_start()  # –£–±—Ä–∞–ª–∏ –≤—ã–∑–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')

# –ö–ª–∞—Å—Å—ã –¥–ª—è FSM
class NewOrder(StatesGroup):
    name = State()
    price = State()
    photo = State()
    description = State()

class NewOrder1(StatesGroup):
    user_id = State()
    user_name = State()
    chanel_url = State()


class CancelOrder(StatesGroup):
    cancel = State()

class Admin(StatesGroup):
    name = State()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def chek_chanel(chat_member):
    if chat_member['status'] != 'left':
        return True
    else:
        return False



# –•—ç–Ω–¥–ª–µ—Ä—ã
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    global user_id
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_name = message.from_user.first_name
    user_last_name = message.from_user.last_name
    full_name = f'{user_name} {user_last_name}' if user_last_name else user_name
    print(f"user_id: {user_id}")
    chat_member = await bot.get_chat_member(chat_id=Chanel_id, user_id=message.from_user.id)
    start_command = message.text
    referer_id = str(start_command[7:])  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '/start '
    if chek_chanel(chat_member):
        if not apiClient.user_exists(user_id):
            if referer_id != "":
                if referer_id != str(message.from_user.id):
                    apiClient.add_user(user_id, full_name, referer_id)
                    await bot.send_message(referer_id, "–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                    user_data = apiClient.get_user(referer_id)
                    print(user_data)
                    if user_data:
                        user_data['points'] += 100
                        current_score = user_data['points']
                        if apiClient.update_user(referer_id, user_data):
                            await message.answer(f'{full_name}, –í–∞—à–∏ –±–∞–ª–ª—ã: {current_score}')
                        else:
                            await message.answer(f'{full_name}, –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤')
                    else:
                        await message.answer(f'{full_name}, –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤')
                else:
                    apiClient.add_user(user_id, full_name)
                    await bot.send_message(message.from_user.id,
                                           "–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
            else:
                apiClient.add_user(user_id, full_name, "")
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {full_name}\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TGplay!',
                             reply_markup=krb.create_keyboard(user_id))
    else:
        await bot.send_message(user_id, Not_Sub_Message, reply_markup=krb.My_Chanel, reply_to_message_id=message.message_id)

@dp.message_handler(commands=['admin'])
async def start(message: types.Message):
    if apiClient.exist_admin(message.chat.id):
        await message.answer("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å‚úÖ")
        await message.answer("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∏—Ç —Ñ—Ä–∞–∑—É /admin_1_get_users\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é /start")
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–∞–Ω–∞–ª–∞(")

@dp.message_handler(commands=['admin_1_get_users'])
async def start(message: types.Message):
    await message.answer("–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ø—Ä–∏–∑!\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ", reply_markup=krb.cancel_keyboard())
    await NewOrder.next()

@dp.message_handler(commands=['my_admin_panel'])
async def start(message: types.Message):
    if message.from_user.id==765843635 or message.from_user.id==504035257 or message.from_user.id==828012647:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –°—É–ø–µ—Ä-–ê–¥–º–∏–Ω–∞ ü¶∏")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" , reply_markup=krb.Super)
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º")



# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_comments = defaultdict(list)

@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_message(message: types.Message):
    user_name = message.from_user.first_name
    user_last_name = message.from_user.last_name
    full_name = f'{user_name} {user_last_name}' if user_last_name else user_name

    if message.chat.type == 'supergroup':
        user_id = message.from_user.id
        if user_id == 777000:
            return
        message_text = message.text.lower()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = apiClient.get_user(user_id)
        if user is None:
            return
        current_score = user['points']
        if current_score is None:
            current_score = 0

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        current_time = time.time()  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞ —ç–ø–æ—Ö–∏
        user_comments[user_id] = [timestamp for timestamp in user_comments[user_id] if
                                  current_time - timestamp <= 5 * 3600]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —á–∞—Å–æ–≤

        if len(user_comments[user_id]) < 3:
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª, –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –º–µ–Ω—å—à–µ 3 –∑–∞ 5 —á–∞—Å–æ–≤
            user['points'] += 50
            if apiClient.update_user(user_id, user):
                current_score += 50
                user_comments[user_id].append(current_time)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–ø–∏—Å–æ–∫
                await message.answer(f'{full_name}, –í–∞—à–∏ –±–∞–ª–ª—ã: {current_score}')
            else:
                await message.answer(f'{full_name}, –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤')
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –µ–≥–æ
            await message.answer(
                f'{full_name}, –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 3 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∑–∞ 5 —á–∞—Å–æ–≤. –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–∞–ª–ª—ã.')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–ª–æ—Ö–∏—Ö —Å–ª–æ–≤
        if message_text in (".", "–ø–ª–æ—Ö–æ", "xxx", "–•–£–ô"):
            # current_score -= 1
            await message.delete()  # –£–¥–∞–ª—è–µ–º –ø–ª–æ—Ö–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                f'{full_name}, –≤ –í–∞—à–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–ª–æ–≤–æ!\n–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ. –í–∞—à–∏ –±–∞–ª–ª—ã: {current_score}')


@dp.message_handler(state=NewOrder.name)
async def start_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ –ø—Ä–∏–∑", reply_markup=krb.cancel_keyboard())
    await NewOrder.next()

@dp.message_handler(state=NewOrder.price)
async def start_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ", reply_markup=krb.cancel_keyboard())
    await NewOrder.next()

@dp.message_handler(lambda message: not message.photo, state=NewOrder.photo)
async def add_item_photo_check(message: types.Message):
    await message.answer('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!')

@dp.message_handler(content_types=['photo'], state=NewOrder.photo)
async def add_item_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    print(photo)
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    await bot.download_file_by_id(file_id, file.file_path)
    print(file)
    with open(file.file_path, 'rb') as image:
        image_data = image.read()

    async with state.proxy() as data:
        data['photo'] = base64.b64encode(image_data).decode('utf-8')
        data['description'] = message.caption

    if os.path.exists(file.file_path):
        os.remove(file.file_path)

    # –£–±—Ä–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if await apiClient.add_prize(data):
        await message.answer('–ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
    else:
        await message.answer('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!')
    await state.finish()

@dp.callback_query_handler(text='cancel', state="*")
async def cancel_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback_query.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback_query.message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TGplay!', reply_markup=krb.create_keyboard(callback_query.message.from_user.id))


# –î—Ä—É–≥–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ª–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ç–∞–∫–∂–µ —É–±—Ä–∞–Ω–∞


# –∫–∞–ª–±—ç–∫–∏
@dp.callback_query_handler(text="sub")
async def subchanel(callback_query: types.CallbackQuery):
    referer_id = ''
    ref_message_id = ''
    if callback_query.message.reply_to_message:
        ref_message_id = callback_query.message.reply_to_message.message_id
        referer_id = callback_query.message.reply_to_message.text[7:]
    print(referer_id)
    user_name = callback_query.from_user.first_name
    user_last_name = callback_query.from_user.last_name
    full_name = f'{user_name} {user_last_name}' if user_last_name else user_name
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)

    if chek_chanel(await bot.get_chat_member(chat_id=Chanel_id, user_id=callback_query.from_user.id)):
        if not apiClient.user_exists(user_id):
            if referer_id != "":
                if referer_id != str(callback_query.message.from_user.id):
                    apiClient.add_user(user_id, full_name, referer_id)
                    await bot.send_message(referer_id, "–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                    apiClient.add_user(user_id, full_name, referer_id)
                    await bot.send_message(referer_id, "–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                    user_data = apiClient.get_user(referer_id)
                    print(user_data)
                    if user_data:
                        user_data['points'] += 100
                        current_score = user_data['points']
                        if apiClient.update_user(referer_id, user_data):
                            await bot.send_message(callback_query.from_user.id, f'{full_name}, –í–∞—à–∏ –±–∞–ª–ª—ã: {current_score}')
                        else:
                            await bot.send_message(callback_query.from_user.id, f'{full_name}, –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤')
                    else:
                        await bot.send_message(callback_query.from_user.id, f'{full_name}, –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤')
                else:
                    apiClient.add_user(user_id, full_name)
                    await bot.send_message(callback_query.message.from_user.id,
                                           "–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
            else:
                apiClient.add_user(user_id, full_name, "")
        await bot.send_message(callback_query.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, {full_name}\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TGplay!',
                               reply_markup=krb.create_keyboard(user_id))
    else:
        print("check_channel false")
        await bot.send_message(callback_query.from_user.id, Not_Sub_Message, reply_markup=krb.My_Chanel, reply_to_message_id=ref_message_id)


@dp.callback_query_handler(lambda query: query.data == 'more')
async def More(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(
        callback_query.from_user.id,
        "<b>TGplay: –ü–æ–ª—É—á–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª!</b>\n\n"
        "–ü—Ä–æ—è–≤–ª—è–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, "
        "–∫–æ–ø–∏—Ç–µ –æ—á–∫–∏ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã!üéÅ\n\n"
        "Ô∏èÔ∏è‚ö†Ô∏è –ù–∞–≥—Ä–∞–¥—ã, –∏—Ö —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ —è–≤–ª—è—é—Ç—Å—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –∞–¥–º–∏–Ω–æ–≤/–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–∞–Ω–∞–ª–æ–≤.",
        parse_mode='HTML'  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑–º–µ—Ç–∫–∏
    )
    await bot.send_message(callback_query.from_user.id, "üëå", reply_markup=krb.Back)


# —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
@dp.callback_query_handler(lambda query: query.data == 'profile')
async def Prof(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    if callback_query.message.chat.type == 'private':
        user_name = callback_query.from_user.first_name
        user_last_name = callback_query.from_user.last_name
        user_id = callback_query.from_user.id
        referals_count = apiClient.count_referals(user_id)  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç user_id
        full_name = f'{user_name} {user_last_name}' if user_last_name else user_name
        await bot.send_message(user_id,
                               f'üë§ {full_name}\n\n–í–∞—à ID: {user_id}\n–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ üéÅ: https://t.me/{cf.BOT_NAME}?start={user_id}\n\n–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referals_count}',
                               reply_markup=krb.Back)


@dp.callback_query_handler(lambda query: query.data == 'back')
async def Back(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.send_message(callback_query.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=krb.create_keyboard(user_id))


@dp.callback_query_handler(lambda query: query.data == 'add')
async def More(callback_query: types.CallbackQuery):
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ Username
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ User_ID", reply_markup=krb.Back)
    await NewOrder1.next()

@dp.message_handler(state=NewOrder1.user_id)
async def start_id(message: types.Message, state: FSMContext):
    if message.text.isnumeric():
        async with state.proxy() as data:
                data['user_id'] = message.text
        await message.answer("–í–≤–µ–¥–∏—Ç–µ User_Name", reply_markup=krb.cancel_keyboard())
        await NewOrder1.next()
    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ user_id . –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=krb.cancel_keyboard())

@dp.message_handler(state=NewOrder1.user_name)
async def start_names(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_name'] = message.text
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª", reply_markup=krb.cancel_keyboard())
    await NewOrder1.next()

@dp.message_handler(state=NewOrder1.chanel_url)
async def start_names(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['chanel_url'] = message.text
    await message.answer("–£—Å–ø–µ—à–Ω–æ –î–æ–±–∞–≤–ª–µ–Ω–æ!")
    await NewOrder1.next()

    if apiClient.add_admin(data['user_id'], data["user_name"], data["chanel_url"]):
        await bot.send_message(data['user_id'], "–ù–æ–≤—ã–π –∞–¥–º–∏–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è")
    else:
        await bot.send_message(data['user_id'], "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞")



@dp.callback_query_handler(lambda query: query.data == 'remove')
async def More(callback_query: types.CallbackQuery):
    await callback_query.bot.send_message(callback_query.from_user.id , "–í–≤–µ–¥–∏—Ç–µ UserName –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã", reply_markup=krb.Back)
    await Admin.next()

@dp.message_handler(state=Admin.name)
async def start_name(message: types.Message, state: FSMContext):
    await Admin.next()
    user_id = message.from_user.id
    if apiClient.delete_admin(message.text):
        await bot.send_message(user_id, "–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω‚úÖ")
    else:
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")

# def get_all_user_ids():
#     # –ü—Ä–∏–º–µ—Ä: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#     return db1.get_all_user_ids()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –ø–æ—Å—Ç–µ
async def get_reactions_count(post_url):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –ø–æ—Å—Ç–µ
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é web scraping –∏–ª–∏ API Telegram
    return await reaction(0)  # –ü—Ä–∏–º–µ—Ä: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π


@dp.channel_post_handler()
async def channel_message(message: types.Message):
    # –ö–æ–≥–¥–∞ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∑–¥–µ—Å—å
    reactions = await reaction(1)
    user_data = apiClient.get_random_user()
    user_data['points'] += reactions * 50
    target_user_id = user_data['userId']
    apiClient.update_user(target_user_id, user_data)
    print(f"Saved to DB points")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(target_user_id, f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {reactions * 50} –±–∞–ª–ª–æ–≤!")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å url –∏ callback_data
    post_url = f"https://t.me/mvp1test"
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É", url=post_url),
        InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã", callback_data=f"goto_post:{message.message_id}")
    )

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_ids = apiClient.get_all_user_ids()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user_id in user_ids:
        try:
            await bot.send_message(user_id, "–ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ!", reply_markup=keyboard)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('goto_post'))
async def process_goto_post(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    message_id = callback_query.data.split(':')[1]
    post_url = f"https://t.me/mvp1test"
    initial_reactions = await get_reactions_count(post_url)

    await asyncio.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥

    final_reactions = await get_reactions_count(post_url)

    try:
        user_data = apiClient.get_user(user_id)
        if final_reactions > initial_reactions:
            user_data['points'] += 50
            target_user_id = user_data['userId']
            apiClient.update_user(target_user_id, user_data)
            await bot.answer_callback_query(callback_query.id, "–í—ã –ø–æ–ª—É—á–∏–ª–∏ 50 –±–∞–ª–ª–æ–≤!")
            await bot.send_message(callback_query.message.chat.id,
                                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.username} –ø–æ–ª—É—á–∏–ª 50 –±–∞–ª–ª–æ–≤!")
        else:
            await bot.answer_callback_query(callback_query.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.")
            await bot.send_message(callback_query.message.chat.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query: {e}")


if __name__ == '__main__':
    try:
        executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
    except:
        pass
